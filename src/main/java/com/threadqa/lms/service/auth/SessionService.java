package com.threadqa.lms.service.auth;

import com.threadqa.lms.dto.auth.SessionInfoResponse;
import com.threadqa.lms.exception.AccountBlockedException;
import com.threadqa.lms.exception.ResourceNotFoundException;
import com.threadqa.lms.exception.SuspiciousActivityException;
import com.threadqa.lms.exception.TooManySessionsException;
import com.threadqa.lms.model.user.User;
import com.threadqa.lms.model.user.UserSession;
import com.threadqa.lms.repository.user.UserRepository;
import com.threadqa.lms.repository.user.UserSessionRepository;
import com.threadqa.lms.service.notification.TelegramNotificationService;
import com.threadqa.lms.util.DeviceDetectionService;
import com.threadqa.lms.util.GeoLocationService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class SessionService {

    private final UserSessionRepository sessionRepository;
    private final UserRepository userRepository;
    private final GeoLocationService geoLocationService;
    private final DeviceDetectionService deviceDetectionService;
    private final TelegramNotificationService telegramNotificationService;

    private static final int MAX_ACTIVE_SESSIONS = 2;

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * 
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param token JWT —Ç–æ–∫–µ–Ω
     * @param request HTTP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
     * @return —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
     */
    @Transactional
    public UserSession createSession(Long userId, String token, HttpServletRequest request) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!user.getIsActive()) {
            throw new AccountBlockedException("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.");
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        String ipAddress = getClientIp(request);
        String userAgent = request.getHeader("User-Agent");
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        String city = geoLocationService.getCity(ipAddress);
        String country = geoLocationService.getCountry(ipAddress);
        String deviceType = deviceDetectionService.getDeviceType(userAgent);
        String browser = deviceDetectionService.getBrowser(userAgent);
        String os = deviceDetectionService.getOperatingSystem(userAgent);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        checkForSuspiciousActivity(userId, city, deviceType, browser);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        long activeSessionsCount = sessionRepository.countByUserIdAndIsActiveTrue(userId);
        
        if (activeSessionsCount >= MAX_ACTIVE_SESSIONS) {
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
            deactivateOldestSession(userId);
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        UserSession session = UserSession.builder()
                .userId(userId)
                .token(token)
                .ipAddress(ipAddress)
                .city(city)
                .country(country)
                .deviceType(deviceType)
                .browser(browser)
                .operatingSystem(os)
                .userAgent(userAgent)
                .isActive(true)
                .createdAt(LocalDateTime.now())
                .lastActivityAt(LocalDateTime.now())
                .build();
        
        return sessionRepository.save(session);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    private void checkForSuspiciousActivity(Long userId, String city, String deviceType, String browser) {
        List<UserSession> activeSessions = sessionRepository.findByUserIdAndIsActiveTrue(userId);
        
        if (activeSessions.isEmpty()) {
            return; // –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥, –Ω–µ—Ç —Å —á–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        boolean hasCityMatch = activeSessions.stream()
                .anyMatch(s -> city.equals(s.getCity()));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Å—Å–∏–∏ —Å —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        boolean hasDeviceMatch = activeSessions.stream()
                .anyMatch(s -> deviceType.equals(s.getDeviceType()));
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∏ –ø–æ –≥–æ—Ä–æ–¥—É, –Ω–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É, —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π
        if (!hasCityMatch && !hasDeviceMatch) {
            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new ResourceNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
            user.setIsActive(false);
            user.setBlockedAt(LocalDateTime.now());
            user.setBlockReason("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –≤—Ö–æ–¥ –∏–∑ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
            userRepository.save(user);
            
            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
            sessionRepository.deactivateAllUserSessions(userId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (user.getTelegramChatId() != null) {
                telegramNotificationService.sendNotification(
                        user.getTelegramChatId(),
                        "‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. " +
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥ –∏–∑ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (" + city + ") —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. " +
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
                );
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            telegramNotificationService.sendNotificationToAdmin(
                    "üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + user.getEmail() + " (ID: " + userId + ").\n" +
                    "–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥ –∏–∑ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (" + city + ") —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (" + deviceType + ", " + browser + ").\n" +
                    "–ê–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            );
            
            throw new SuspiciousActivityException("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
        }
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void deactivateOldestSession(Long userId) {
        List<UserSession> oldestSessions = sessionRepository.findOldestActiveSessionByUserId(
                userId, PageRequest.of(0, 1));
        
        if (!oldestSessions.isEmpty()) {
            UserSession oldestSession = oldestSessions.get(0);
            oldestSession.deactivate();
            sessionRepository.save(oldestSession);
            
            log.info("–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}, —Å–µ—Å—Å–∏—è ID: {}", 
                    userId, oldestSession.getId());
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
     */
    @Transactional
    public void updateSessionActivity(String token) {
        sessionRepository.findByTokenAndIsActiveTrue(token).ifPresent(session -> {
            session.updateLastActivity();
            sessionRepository.save(session);
        });
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é
     */
    @Transactional
    public void deactivateSession(Long sessionId, Long userId) {
        UserSession session = sessionRepository.findById(sessionId)
                .orElseThrow(() -> new ResourceNotFoundException("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
        
        if (!session.getUserId().equals(userId)) {
            throw new AccessDeniedException("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–µ–π");
        }
        
        session.deactivate();
        sessionRepository.save(session);
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
     */
    @Transactional
    public void deactivateAllSessionsExceptCurrent(Long userId, Long currentSessionId) {
        sessionRepository.deactivateAllUserSessionsExcept(userId, currentSessionId);
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional
    public void deactivateAllSessions(Long userId) {
        sessionRepository.deactivateAllUserSessions(userId);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É
     */
    public Optional<UserSession> getSessionByToken(String token) {
        return sessionRepository.findByTokenAndIsActiveTrue(token);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public Page<SessionInfoResponse> getUserActiveSessions(Long userId, Pageable pageable) {
        Page<UserSession> sessions = sessionRepository.findByUserIdAndIsActiveTrue(userId, pageable);
        
        return sessions.map(this::mapToSessionInfoResponse);
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UserSession –≤ SessionInfoResponse
     */
    private SessionInfoResponse mapToSessionInfoResponse(UserSession session) {
        return SessionInfoResponse.builder()
                .id(session.getId())
                .ipAddress(session.getIpAddress())
                .city(session.getCity())
                .country(session.getCountry())
                .deviceType(session.getDeviceType())
                .browser(session.getBrowser())
                .operatingSystem(session.getOperatingSystem())
                .createdAt(session.getCreatedAt())
                .lastActivityAt(session.getLastActivityAt())
                .build();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
     */
    private String getClientIp(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }
        return request.getRemoteAddr();
    }
}
